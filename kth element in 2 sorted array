//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            int k = Integer.parseInt(br.readLine().trim());

            String[] line1 = br.readLine().trim().split(" ");
            int[] arr1 = new int[line1.length];
            for (int i = 0; i < line1.length; i++) {
                arr1[i] = Integer.parseInt(line1[i]);
            }

            String[] line2 = br.readLine().trim().split(" ");
            int[] arr2 = new int[line2.length];
            for (int i = 0; i < line2.length; i++) {
                arr2[i] = Integer.parseInt(line2[i]);
            }

            Solution ob = new Solution();
            System.out.println(ob.kthElement(k, arr1, arr2));
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    public long kthElement(int k, int arr1[], int arr2[]) {
      if (arr1.length > arr2.length) return kthElement(k,arr2,arr1);

        int left = k; // length of left half
            int m=arr1.length;
            int n=arr2.length;
        // apply binary search:
        int low = Math.max(0, k - n) 
        //if k=7 and we have select low=0; and totalelements on arr2 is 5 //so take max (0,7-5) you have to select 2 from arr1 
        
        , high = Math.min(k, m); // no need of picking more take min if k=2 and m =4 
        while (low <= high) {
            int mid1 = (low + high)/2;
            int mid2 = left - mid1;
            // calculate l1, l2, r1, and r2
            int l1 = mid1>0?arr1[mid1-1]:Integer.MIN_VALUE;
            int l2 = mid2>0?arr2[mid2-1]:Integer.MIN_VALUE;
            int r1 = mid1<m? arr1[mid1]:Integer.MAX_VALUE;
            int r2 = mid2<n? arr2[mid2]:Integer.MAX_VALUE;
           
            if (l1 <= r2 && l2 <= r1) {
                return Math.max(l1, l2);
            }

            // eliminate the halves:
            else if (l1 > r2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        return 0; //
    }
}
